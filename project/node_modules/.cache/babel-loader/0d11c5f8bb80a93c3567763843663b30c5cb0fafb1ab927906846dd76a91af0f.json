{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN\\\\Desktop\\\\combined\\\\demandion\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false); // Controls whether the chatbot is open or not\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const toggleChatbot = () => {\n    console.log(\"Button clicked! Toggling chatbot...\"); // Debugging line\n    setIsOpen(!isOpen);\n  };\n  const handleSendMessage = e => {\n    if (e.key === 'Enter' && input.trim() !== '') {\n      const userMessage = {\n        type: 'user',\n        text: input\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n\n      // Call the Flask API running on localhost:5000/chatbot\n      fetch('http://localhost:5000/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: input\n        })\n      }).then(response => response.json()).then(data => {\n        const botMessage = {\n          type: 'bot',\n          text: data.answer\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      }).catch(error => {\n        console.error('Error:', error);\n        const errorMessage = {\n          type: 'bot',\n          text: 'Error occurred while fetching response from bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      });\n      setInput(''); // Clear input field\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chatbot-btn\",\n      onClick: toggleChatbot,\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        id: \"chatbot-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatbot-message ${message.type === 'user' ? 'user-message' : 'bot-message'}`,\n          children: [message.type === 'user' ? 'You: ' : 'Bot: ', message.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chatbot-input\",\n        placeholder: \"Type a message and press Enter...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"Gh4s1GdJuG5uIMQtVEZqGMQgaRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","toggleChatbot","console","log","handleSendMessage","e","key","trim","userMessage","type","text","prevMessages","fetch","method","headers","body","JSON","stringify","question","then","response","json","data","botMessage","answer","catch","error","errorMessage","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","message","index","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN/Desktop/combined/demandion/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false); // Controls whether the chatbot is open or not\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const toggleChatbot = () => {\r\n    console.log(\"Button clicked! Toggling chatbot...\"); // Debugging line\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    if (e.key === 'Enter' && input.trim() !== '') {\r\n      const userMessage = { type: 'user', text: input };\r\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n      // Call the Flask API running on localhost:5000/chatbot\r\n      fetch('http://localhost:5000/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ question: input }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const botMessage = { type: 'bot', text: data.answer };\r\n          setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n          const errorMessage = { type: 'bot', text: 'Error occurred while fetching response from bot' };\r\n          setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        });\r\n\r\n      setInput(''); // Clear input field\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button id=\"chatbot-btn\" onClick={toggleChatbot}>\r\n        ðŸ’¬\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"chatbot-container\">\r\n          <div className=\"chatbot-header\">Chatbot</div>\r\n          <div className=\"chatbot-messages\" id=\"chatbot-messages\">\r\n            {messages.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chatbot-message ${message.type === 'user' ? 'user-message' : 'bot-message'}`}\r\n              >\r\n                {message.type === 'user' ? 'You: ' : 'Bot: '}\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"chatbot-input\"\r\n            placeholder=\"Type a message and press Enter...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleSendMessage}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}