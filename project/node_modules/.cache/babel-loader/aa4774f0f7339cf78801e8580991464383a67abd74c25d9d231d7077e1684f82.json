{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN\\\\Desktop\\\\combined\\\\demandion\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css'; // Import the CSS for chatbot styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const toggleChatbox = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      const question = e.target.value;\n\n      // Add user's message to chatbox\n      const userMessage = {\n        type: 'user',\n        text: question\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n\n      // Clear input field\n      setUserInput('');\n\n      // Simulate fetching a chatbot response (replace with your API call)\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question\n        })\n      }).then(response => response.json()).then(data => {\n        const botMessage = {\n          type: 'bot',\n          text: data.answer\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chatbot-btn\",\n      onClick: toggleChatbox,\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbot-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.type,\n          children: [message.type === 'user' ? 'You: ' : 'Bot: ', message.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"chatbot-input\",\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"fq+VhNRB6vBk2vhHCHxICIZbt1k=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","userInput","setUserInput","toggleChatbox","handleKeyPress","e","key","question","target","value","userMessage","type","text","prevMessages","fetch","method","headers","body","JSON","stringify","then","response","json","data","botMessage","answer","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","className","onChange","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN/Desktop/combined/demandion/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css'; // Import the CSS for chatbot styling\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n\r\n  const toggleChatbox = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      const question = e.target.value;\r\n\r\n      // Add user's message to chatbox\r\n      const userMessage = { type: 'user', text: question };\r\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n      // Clear input field\r\n      setUserInput('');\r\n\r\n      // Simulate fetching a chatbot response (replace with your API call)\r\n      fetch('/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ question }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const botMessage = { type: 'bot', text: data.answer };\r\n          setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Chatbot Button */}\r\n      <button id=\"chatbot-btn\" onClick={toggleChatbox}>\r\n        Chatbot\r\n      </button>\r\n\r\n      {/* Chatbox */}\r\n      {isOpen && (\r\n        <div id=\"chatbot-box\">\r\n          <div id=\"chatbot-messages\">\r\n            {messages.map((message, index) => (\r\n              <div key={index} className={message.type}>\r\n                {message.type === 'user' ? 'You: ' : 'Bot: '}\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <input\r\n            id=\"chatbot-input\"\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Type a message...\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMW,aAAa,GAAGA,CAAA,KAAM;IAC1BL,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMO,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACrB,MAAMC,QAAQ,GAAGF,CAAC,CAACG,MAAM,CAACC,KAAK;;MAE/B;MACA,MAAMC,WAAW,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAEL;MAAS,CAAC;MACpDP,WAAW,CAAEa,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,CAAC,CAAC;;MAE7D;MACAR,YAAY,CAAC,EAAE,CAAC;;MAEhB;MACAY,KAAK,CAAC,UAAU,EAAE;QAChBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEZ;QAAS,CAAC;MACnC,CAAC,CAAC,CACCa,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACd,MAAMC,UAAU,GAAG;UAAEb,IAAI,EAAE,KAAK;UAAEC,IAAI,EAAEW,IAAI,CAACE;QAAO,CAAC;QACrDzB,WAAW,CAAEa,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEW,UAAU,CAAC,CAAC;MAC9D,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACE9B,OAAA;IAAAgC,QAAA,gBAEEhC,OAAA;MAAQiC,EAAE,EAAC,aAAa;MAACC,OAAO,EAAEzB,aAAc;MAAAuB,QAAA,EAAC;IAEjD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRnC,MAAM,iBACLH,OAAA;MAAKiC,EAAE,EAAC,aAAa;MAAAD,QAAA,gBACnBhC,OAAA;QAAKiC,EAAE,EAAC,kBAAkB;QAAAD,QAAA,EACvB3B,QAAQ,CAACkC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BzC,OAAA;UAAiB0C,SAAS,EAAEF,OAAO,CAACvB,IAAK;UAAAe,QAAA,GACtCQ,OAAO,CAACvB,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO,EAC3CuB,OAAO,CAACtB,IAAI;QAAA,GAFLuB,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNtC,OAAA;QACEiC,EAAE,EAAC,eAAe;QAClBhB,IAAI,EAAC,MAAM;QACXF,KAAK,EAAER,SAAU;QACjBoC,QAAQ,EAAGhC,CAAC,IAAKH,YAAY,CAACG,CAAC,CAACG,MAAM,CAACC,KAAK,CAAE;QAC9C6B,UAAU,EAAElC,cAAe;QAC3BmC,WAAW,EAAC;MAAmB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpC,EAAA,CAlEID,OAAO;AAAA6C,EAAA,GAAP7C,OAAO;AAoEb,eAAeA,OAAO;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}